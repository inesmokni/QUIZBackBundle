<?php

namespace quiz\BackBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * QuizRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuizRepository extends EntityRepository
{
	
	public function getLastBlocBysubjectAndVersion($subject){
		$version = $subject->getQuizVersion();
	
		$qb = $this->getEntityManager()->createQueryBuilder();
		$entities = $qb->select('qs')->from('quiz\FrontBundle\Entity\QuizSubject', 'qs')
		->innerJoin("qs.subject", "subject")
		->innerJoin("qs.question", "question")
		->innerJoin("question.bloc", "b")
		->innerJoin("b.quiz", "quiz")
		->where("subject.id = " . $subject->getId())
// 		->andWhere("quiz_subject.attempt = " . $subject->getNbAttempt())
		;
		if( $version)
			$entities->andWhere("quiz.version = " . $version);
			else
				$entities->andWhere("quiz.isActive = true");
					
				$entities->addOrderBy('b.category', 'DESC')->addOrderBy('b.order', 'DESC')
				->setMaxResults( 1 );
	
				$query = $entities->getQuery();
				$result = $query->getOneOrNullResult();
	
	
				return $result ? $result->getQuestion()->getBloc() : null;
	
	}
	
	
// 	public function getLastBlocBysubjectAndVersion($subject){
// 		$version = $subject->getQuizVersion();
		
// 		$qb = $this->getEntityManager()->createQueryBuilder();
// 		$entities = $qb->select('b')->from('quiz\BackBundle\Entity\Bloc', 'b')
// 		->innerJoin("b.questions", "questions")
// 		->innerJoin("b.quiz", "aq")
// 		->innerJoin("questions.quiz_subject", "quiz_subject")
// 		->innerJoin("quiz_subject.subject", "subject")
// 		->where("subject.id = " . $subject->getId())
// 		->andWhere("quiz_subject.attempt = " . $subject->getNbAttempt())
// 		;
// 		if( $version)
// 			$entities->andWhere("quiz.version = " . $version);
// 		else 
// 			$entities->andWhere("quiz.isActive = true");
			
// 		$entities->addOrderBy('b.category', 'DESC')->addOrderBy('b.order', 'DESC')
// 		->setMaxResults( 1 );
		
// 		$query = $entities->getQuery();
// 		$result = $query->getOneOrNullResult();
		
		
// 		return $result;
		
// 	}
	
	
	public function getFromCategory($subject, $category, $categories){
		
		$next_bloc = $this->getFirstBloc($subject->getQuizVersion(), $category);
		if( $next_bloc ){
			$checkNBQuestions = $this->checkNBQuestions($subject,$next_bloc);
			while($checkNBQuestions == false){
				$next_bloc = $this->getBloc($subject->getQuizVersion(),$next_bloc);
				if(!$next_bloc){
					if( $this->getNextCategory($categories,$category)){
						return $this->getFromCategory($subject,  $this->getNextCategory($categories,$category), $categories);
					} else {
// 						die;
						return null;
					}
				}
				$checkNBQuestions = $this->checkNBQuestions($subject,$next_bloc);
			}
			
		} else {
			if( $this->getNextCategory($categories,$category))
				return $this->getFromCategory($subject,  $this->getNextCategory($categories,$category), $categories);
		}
		
		
		return $next_bloc;
	}
	
	private function getNextCategory($categories, $category){
		while (key($categories) != null):
			if( key($categories) == $category){
				$next = next($categories);
				return $next ? key($categories) : null;
			}
			$next = next($categories);
		endwhile;
		
		return false;
	}
	
	
	public function getFirstBloc($version, $categ){
		$qb = $this->getEntityManager()->createQueryBuilder();
		$entities = $qb->select('b')->from('quiz\BackBundle\Entity\Bloc', 'b');
			$entities
			->innerJoin("b.quiz", "quiz")
			->andWhere("b.category = '".$categ."'");
			if( $version)
				$entities->andWhere("quiz.version = " . $version);
			else
				$entities->andWhere("quiz.isActive = true");
		$entities->orderBy('b.order', 'ASC')
		->setMaxResults( 1 );
		
		$query = $entities->getQuery();
		$result = $query->getOneOrNullResult();
		
		return $result;
	}
	
	
	public function getNextBloc($subject,$bloc){
		$next_bloc= $this->getBloc($subject->getQuizVersion(),$bloc);
		if( $next_bloc){
			$checkNBQuestions = $this->checkNBQuestions($subject,$next_bloc);
			while($checkNBQuestions == false){
				$next_bloc = $this->getBloc($subject->getQuizVersion(),$next_bloc);
				if(!$next_bloc)
					return null;
				$checkNBQuestions = $this->checkNBQuestions($subject,$next_bloc);
			}
				
		}
		
		
		return $next_bloc;
	}
	
	
	public function getBloc($version,$bloc){
		$qb = $this->getEntityManager()->createQueryBuilder();
		$entities = $qb->select('b')->from('quiz\BackBundle\Entity\Bloc', 'b');
		if($bloc !==null){
			$entities
			->innerJoin("b.quiz", "quiz")
			->andWhere("b.order >" . $bloc->getOrder())
			->andWhere("b.category = '" . $bloc->getCategory() ."'");
// 			->andWhere("quiz.version = " . $version);
		} else {
			$entities
				->innerJoin("b.quiz", "quiz")
				->andWhere("b.category = 'C01'");
// 				->andWhere("quiz.version = " . $version);
		}
		
		if( $version)
			$entities->andWhere("quiz.version = " . $version);
		else 
			$entities->andWhere("quiz.isActive = true");
		
		
		$entities->orderBy('b.order', 'ASC')
		->setMaxResults( 1 );
		
		$query = $entities->getQuery();
		$result = $query->getOneOrNullResult();
		
		return $result;
		
	}
	
	
	public function getPrevBloc($subject,$bloc){
	
		$prev_bloc= $this->findPrevBloc($bloc);
		if( $prev_bloc){
			$checkNBQuestions = $this->checkNBQuestions($subject,$prev_bloc);
			while($checkNBQuestions == false){
				$prev_bloc = $this->findPrevBloc($prev_bloc);
				if(!$prev_bloc)
					return null;
					$checkNBQuestions = $this->checkNBQuestions($subject,$prev_bloc);
			}
	
		}
	
	
		return $prev_bloc;
	}

	public function findPrevBloc($bloc){
		$qb = $this->getEntityManager()->createQueryBuilder();
		$entities = $qb->select('b')->from('quiz\BackBundle\Entity\Bloc', 'b');
		if($bloc !==null){
			$entities
			->innerJoin("b.quiz", "quiz")
			->where("b.order < " . $bloc->getOrder())
			->andWhere("quiz.id = " . $bloc->getQuiz()->getId())
			->andWhere("b.category = '" . $bloc->getCategory() ."'");
		} else {
			$entities
			->innerJoin("b.quiz", "quiz")
			->where("b.category = 'C01'")
			->andWhere("quiz.id = " . $bloc->getQuiz()->getId());
		}
		$entities->orderBy('b.order', 'DESC')
		->setMaxResults( 1 );
	
		$query = $entities->getQuery();
	
	
		$result = $query->getOneOrNullResult();
		return $result;
	
	}
	
	
	public function getAQsubjectByVersion($id){
		$qb = $this->getEntityManager()->createQueryBuilder();
		$entities = $qb->select('distinct(quiz_subject.response)')->from('quiz\FrontBundle\Entity\QuizSubject', 'quiz_subject')
		->leftJoin("quiz_subject.subject", "subject")
		->where("subject.id = " .$id )
		->andWhere("quiz_subject.quiz_version = subject.quiz_version "  );
	
		$query = $entities->getQuery();
		$result=$query->getResult();
		$result = @call_user_func_array("array_merge_recursive", $result);
		if($result){
			foreach ($result as $key=>$res){
				$array[(int) $res] = true;
			}
					
				return $array;
		}
	
		return $result;
	
	}
	
// 	public function getAQsubjectByVersion($id){
// 		$qb = $this->getEntityManager()->createQueryBuilder();
// 		$entities = $qb->select('distinct(resp.id)')->from('quiz\BackBundle\Entity\Response', 'resp')
// 			->leftJoin("resp.quiz_subject", "aqp")
// 			->leftJoin("aqp.subject", "subject")
// 			->where("subject.id = " .$id )
// 			->andWhere("aqp.attempt = subject.nbAttempt "  );
		
// 		$query = $entities->getQuery();
// 		$result=$query->getResult();
// 		$result = @call_user_func_array("array_merge_recursive", $result);
// 		if($result){
// 			foreach ($result as $key=>$res)
// 					$array[(int) $res] = true;
			
// 			return $array;
// 		}
		
// 		return $result;
		
// 	}
	
	
	public function getQuestionByAQAndType($aq, $types){
		$qb = $this->getEntityManager()->createQueryBuilder();
		$entities = $qb->select('qu')->from('quiz\BackBundle\Entity\Question', 'qu')
		->leftJoin("qu.bloc", "b")
		->leftJoin("b.quiz", "quiz")
		->where("quiz.id = " .$aq->getId() )
		->andWhere("qu.type IN  (:types) " )
		->setParameter("types", $types);
		
		$query = $entities->getQuery();
		$result = $query->getResult();
		
		return $result;
	}
	
	public function checkNBQuestions($subject, $bloc){
		
		if($this->hasNoneConditionQuestions($bloc) || $this->hasConditionQuestions($subject, $bloc))
			return true;
		
		return false;
		
	}
	
	
	public function hasNoneConditionQuestions($bloc){
		$qb = $this->getEntityManager()->createQueryBuilder();
		$entities = $qb->select('qu.id')->from('quiz\BackBundle\Entity\Question', 'qu')
		->leftJoin("qu.bloc", "b")
		->where("b.id = " .$bloc->getId() )
		->andWhere('SIZE(qu.parent_responses) = 0');
		
		$query = $entities->getQuery();
		$result = $query->getResult();
		
		return count($result);
	}
	
	
	public function hasConditionQuestions($subject, $bloc){
		$qb = $this->getEntityManager()->createQueryBuilder();
		$entities = $qb->select('qu.id')->from('quiz\FrontBundle\Entity\QuizSubject', 'quiz_subject')
		->leftJoin("quiz_subject.response", "resp")
		->leftJoin("resp.child_questions", "qu")
		->leftJoin("qu.bloc", "b")
		
		->leftJoin("quiz_subject.subject", "subject")
		
		->where("b.id = " .$bloc->getId() )
		->andWhere("subject.id = " .$subject->getId() )
		->andWhere("quiz_subject.quiz_version = " .$subject->getQuizVersion() )
		;
	
		$query = $entities->getQuery();
		$result = $query->getResult();
	
		return count($result);
	}
	
	
// 	public function hasConditionQuestions($subject, $bloc){
// 		$qb = $this->getEntityManager()->createQueryBuilder();
// 		$entities = $qb->select('qu.id')->from('quiz\BackBundle\Entity\Question', 'qu')
// 		->leftJoin("qu.bloc", "b")
// 		->leftJoin("qu.parent_responses", "pqu")
// 		->leftJoin("pqu.quiz_subject", "quiz_subject")
// 		->leftJoin("quiz_subject.subject", "subject")
// 		->where("b.id = " .$bloc->getId() )
// 		->andWhere("subject.id = " .$subject->getId() )
// 		->andWhere("quiz_subject.attempt = " .$subject->getNBAttempt() )
// 		;
		
// 		$query = $entities->getQuery();
// 		$result = $query->getResult();
	
// 		return count($result);
// 	}
}
